* NOTE
This README is a scratch area to help remind me between long breaks what my
plans/ideas are on the api. You can safely ignore this.

* Thoughts
- Rewrite emulation interface: 
  - Probably could either fit this stuff inside =Hutch= class or combine it with
    =Hutch_Insn=. Maybe multiple inheritance with =PcodeEmit= + =AssemblyEmit=? 
    Going that route means resolving the 2 different =dump= virtuals. Not sure
    whether you can overload virtuals from 2 different base classes.
  - I really don't like how you need the user to declare callbacks which expose
    alot of api details. Write a wrapper/class to streamline this.
  - Consider changing =Hutch_Emulate::hutch_ptr= private member to a =shared_ptr=.
    Although not sure whether raw + smart pointers mix well, changing this might
    entail changing all pointers in library to smart_ptrs... Not sure thats
    worth the time investment.
  - Maybe add a function ptr option to =Hutch_Emulate::emulate()=? Don't like how
    limited the access is to customizing the emulation loop. At the moment only
    customization from the outside is through user defined callbacks. And as far
    as I can tell you can't hook them to run on every instruction executed.


